<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function commerce_pos_gift_card_ui_menu() {
  $items = array();

  // Note: admin/commerce/gift_cards is defined by a default View.

  // Add a gift card.
  $items['admin/commerce/gift_cards/add'] = array(
    'title' => 'Add a gift card',
    'description' => 'Add a new gift card for sale.',
    'page callback' => 'commerce_pos_gift_card_ui_add_page',
    'access callback' => 'commerce_pos_gift_card_ui_gift_card_add_any_access',
    'weight' => 10,
    'file' => 'includes/commerce_pos_gift_card_ui.gift_cards.inc',
  );
  foreach (commerce_pos_gift_card_types() as $type => $gift_card_type) {
    $items['admin/commerce/gift_cards/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Add !name',
      'title arguments' => array('!name' => $gift_card_type['name']),
      'description' => $gift_card_type['description'],
      'page callback' => 'commerce_pos_gift_card_ui_gift_card_form_wrapper',
      'page arguments' => array(commerce_pos_gift_card_new($type)),
      'access callback' => 'commerce_pos_gift_card_access',
      'access arguments' => array('create', commerce_pos_gift_card_new($type)),
      'file' => 'includes/commerce_pos_gift_card_ui.gift_cards.inc',
    );
  }

  $items['admin/commerce/gift_cards/%commerce_pos_gift_card'] = array(
    'title callback' => 'commerce_pos_gift_card_ui_gift_card_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_pos_gift_card_ui_gift_card_view',
    'page arguments' => array(3),
    'access callback' => 'commerce_pos_gift_card_access',
    'access arguments' => array('view', 3),
    'weight' => 0,
    'file' => 'includes/commerce_pos_gift_card_ui.gift_cards.inc',
  );
  $items['admin/commerce/gift_cards/%commerce_pos_gift_card/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/gift_cards/%commerce_pos_gift_card/edit'] = array(
    'title' => 'Edit gift card',
    'page callback' => 'commerce_pos_gift_card_ui_gift_card_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_pos_gift_card_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_pos_gift_card_ui.gift_cards.inc',
  );
  $items['admin/commerce/gift_cards/%commerce_pos_gift_card/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_pos_gift_card_ui_gift_card_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_pos_gift_card_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_pos_gift_card_ui.gift_cards.inc',
  );

  $items['admin/commerce/gift_cards/types'] = array(
    'title' => 'Gift Card types',
    'description' => 'Manage gift card types for your store.',
    'page callback' => 'commerce_pos_gift_card_ui_types_overview',
    'access arguments' => array('administer gift card types'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_pos_gift_card_ui.types.inc',
  );

  foreach (commerce_pos_gift_card_types() as $type => $gift_card_type) {
    // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');

    $items['admin/commerce/gift_cards/types/' . $type_arg] = array(
      'title' => $gift_card_type['name'],
      'page callback' => 'commerce_pos_gift_card_ui_gift_card_type_form_wrapper',
      'page arguments' => array($type),
      'access arguments' => array('administer gift card types'),
      'file' => 'includes/commerce_pos_gift_card_ui.types.inc',
    );
  }

  return $items;
}

/**
 * Menu item title callback: returns the card number of a gift card for its pages.
 *
 * @param $gift_card
 *   The gift card object as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Gift Card: [card number]".
 */
function commerce_pos_gift_card_ui_gift_card_title($gift_card) {
  return t('Gift Card: @card_number', array('@card_number' => $gift_card->card_number));
}

/**
 * Access callback: determines if the user can create any type of gift card.
 */
function commerce_pos_gift_card_ui_gift_card_add_any_access() {
  // Grant automatic access to users with administer gift cards permission.
  if (user_access('administer commerce_pos_gift_card entities')) {
    return TRUE;
  }

  // Check the user's access on a gift card type basis.
  foreach (commerce_pos_gift_card_types() as $type => $gift_card_type) {
    if (commerce_pos_gift_card_access('create', commerce_pos_gift_card_new($type))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback: determines if the user can edit or delete a gift card type.
 *
 * @param $type
 *   The machine-name of the gift card type to be edited or deleted.
 */
function commerce_pos_gift_card_ui_gift_card_type_update_access($type) {
  $gift_card_type = commerce_pos_gift_card_type_load($type);

  if ($gift_card_type['module'] == 'commerce_pos_gift_card_ui') {
    return user_access('administer gift card types');
  }

  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_pos_gift_card_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  foreach (commerce_pos_gift_card_types() as $type => $gift_card_type) {
    // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');

    $items['admin/commerce/gift_cards/types/' . $type_arg . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/gift_cards/types/' . $type_arg . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_pos_gift_card_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/gift_cards/add' on 'admin/commerce/gift_cards'.
  if ($root_path == 'admin/commerce/gift_cards') {
    $item = menu_get_item('admin/commerce/gift_cards/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_menu_map().
 */
function commerce_pos_gift_card_ui_admin_menu_map() {
  // Add awareness to the administration menu of the various gift card types so
  // they are included in the dropdown menu.
  $type_args = array();

  foreach (array_keys(commerce_pos_gift_card_types()) as $type) {
    $type_args[] = strtr($type, '_', '-');
  }

  $map['admin/commerce/gift_cards/types/%'] = array(
    'parent' => 'admin/commerce/gift_cards/types',
    'arguments' => array(
      array('%' => $type_args),
    ),
  );

  return $map;
}

/**
 * Implements hook_help().
 */
function commerce_pos_gift_card_ui_help($path, $arg) {
  // Return the user defined help text per gift card type when adding or editing gift cards.
  if ($arg[1] == 'commerce' && $arg[2] == 'gift_cards' && $arg[3] == 'add' && $arg[4]) {
    $gift_card_type = commerce_pos_gift_card_type_load($arg[4]);
    return (!empty($gift_card_type['help']) ? '<p>' . filter_xss_admin($gift_card_type['help']) . '</p>' : '');
  }
  elseif ($arg[1] == 'commerce' && $arg[2] == 'gift_cards' && is_numeric($arg[3])) {
    $gift_card = commerce_pos_gift_card_load($arg[3]);
    $gift_card_type = commerce_pos_gift_card_type_load($gift_card->type);
    return (!empty($gift_card_type['help']) ? '<p>' . filter_xss_admin($gift_card_type['help']) . '</p>' : '');
  }
}

/**
 * Implements hook_theme().
 */
function commerce_pos_gift_card_ui_theme() {
  return array(
    'gift_card_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/commerce_pos_gift_card_ui.gift_cards.inc',
    ),
    'gift_card_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'includes/commerce_pos_gift_card_ui.types.inc',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_pos_gift_card_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the gift card entity.
  $entity_info['commerce_pos_gift_card']['uri callback'] = 'commerce_pos_gift_card_ui_gift_card_uri';

  // Add callbacks and urls for administer translations.
  $entity_info['commerce_pos_gift_card']['translation']['entity_translation'] += array(
    'base path' => 'admin/commerce/gift_cards/%commerce_pos_gift_card',
    'access callback' => 'commerce_pos_gift_card_entity_translation_tab_access',
    'access arguments' => array(3),
    'edit form' => TRUE,
  );

  // Expose the admin UI for gift card fields.
  foreach ($entity_info['commerce_pos_gift_card']['bundles'] as $type => &$bundle) {
    $bundle['admin'] = array(
      'path' => 'admin/commerce/gift_cards/types/' . strtr($type, '_', '-'),
      'access arguments' => array('administer gift card types'),
    );
  }
}

/**
 * Entity uri callback: points to the edit form of the given gift card if no other
 *   URI is specified.
 */
function commerce_pos_gift_card_ui_gift_card_uri($gift_card) {
  // First look for a return value in the default entity uri callback.
  $uri = commerce_pos_gift_card_uri($gift_card);

  // If a value was found, return it now.
  if (!empty($uri)) {
    return $uri;
  }

  // Otherwise return an admin URI if the user has permission.
  if (commerce_pos_gift_card_access('view', $gift_card)) {
    return array(
      'path' => 'admin/commerce/gift_cards/' . $gift_card->gift_card_id,
    );
  }

  return NULL;
}

/**
 * Implements hook_forms().
 */
function commerce_pos_gift_card_ui_forms($form_id, $args) {
  $forms = array();

  // Define a wrapper ID for the gift card add / edit form.
  $forms['commerce_pos_gift_card_ui_gift_card_form'] = array(
    'callback' => 'commerce_pos_gift_card_gift_card_form',
  );

  // Define a wrapper ID for the gift card delete confirmation form.
  $forms['commerce_pos_gift_card_ui_gift_card_delete_form'] = array(
    'callback' => 'commerce_pos_gift_card_gift_card_delete_form',
  );

  return $forms;
}

/**
 * Implements hook_form_alter().
 */
function commerce_pos_gift_card_ui_form_alter(&$form, &$form_state, $form_id) {
  // On field administration forms for gift card types add a breadcrumb.
  if (in_array($form_id, array('field_ui_field_overview_form', 'field_ui_display_overview_form'))) {
    if ($form['#entity_type'] == 'commerce_pos_gift_card') {
      commerce_pos_gift_card_ui_set_breadcrumb(TRUE);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Gift Card UI module instantiates the Gift Card add/edit form at particular
 * paths in the Commerce IA. It uses its own form ID to do so and alters the
 * form here to add in appropriate redirection and an additional button.
 *
 * @see commerce_pos_gift_card_ui_gift_card_form()
 */
function commerce_pos_gift_card_ui_form_commerce_pos_gift_card_ui_gift_card_form_alter(&$form, &$form_state) {
  // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'commerce_pos_gift_card_ui_gift_card_form_submit';

  // If translation support is enabled, provide the suitable languages
  if (module_exists('entity_translation') && entity_translation_enabled('commerce_pos_gift_card')) {
    $translations = $form_state['commerce_pos_gift_card']->translations;

    $form['language'] = array(
      '#type' => 'select',
      '#title' => t('Language'),
      '#default_value' => (isset($form_state['commerce_pos_gift_card']->language) ? $form_state['commerce_pos_gift_card']->language : ''),
      '#options' => array(LANGUAGE_NONE => t('Language neutral')) + locale_language_list('name'),
      '#weight' => -10,
    );

    // Disable languages for existing translations, so it is not possible to
    // switch this gift card to some language which is already in the translation set.
    foreach ($translations->data as $langcode => $translation) {
      if ($langcode != $translations->original) {
        unset($form['language']['#options'][$langcode]);
      }
    }

    // Since this function may change the language of the submitted form values,
    // it has to be the first called.
    array_unshift($form['actions']['submit']['#submit'], 'commerce_pos_gift_card_ui_gift_card_form_translation_submit');
  }

  // Add the save and continue button for new gift cards.
  if (empty($form_state['commerce_pos_gift_card']->gift_card_id)) {
    $form['actions']['save_continue'] = array(
      '#type' => 'submit',
      '#value' => t('Save and add another'),
      '#submit' => $form['actions']['submit']['#submit'],
      '#suffix' => l(t('Cancel'), 'admin/commerce/gift_cards'),
      '#weight' => 45,
    );
  }
  else {
    $form['actions']['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/gift_cards');
  }
}

/**
 * Submit callback for commerce_pos_gift_card_ui_gift_card_form().
 *
 * @see commerce_pos_gift_card_ui_form_commerce_pos_gift_card_ui_gift_card_form_alter()
 */
function commerce_pos_gift_card_ui_gift_card_form_submit($form, &$form_state) {
  // Set the redirect based on the button clicked.
  $array_parents = $form_state['triggering_element']['#array_parents'];
  $submit_element = array_pop($array_parents);

  if ($submit_element == 'save_continue') {
    $form_state['redirect'] = 'admin/commerce/gift_cards/add/' . strtr($form_state['commerce_pos_gift_card']->type, array('_' => '-'));
  }
  elseif (arg(2) == 'gift_cards' && arg(3) == 'add') {
    $form_state['redirect'] = 'admin/commerce/gift_cards';
  }
}

/**
 * Submit callback for commerce_pos_gift_card_ui_gift_card_form().
 *
 * Checks if translation is enabled for the gift card and handles language changes.
 * Since this handler may change the language of submitted form values it should
 * be the first submit handler called.
 *
 * @see commerce_pos_gift_card_ui_form_commerce_pos_gift_card_ui_gift_card_form_alter()
 */
function commerce_pos_gift_card_ui_gift_card_form_translation_submit($form, &$form_state) {
  // Get an array of available languages.
  $available_languages = field_content_languages();
  list(, , $bundle) = entity_extract_ids('commerce_pos_gift_card', $form_state['commerce_pos_gift_card']);

  foreach (field_info_instances('commerce_pos_gift_card', $bundle) as $instance) {
    $field_name = $instance['field_name'];
    $field = field_info_field($field_name);
    $previous_language = $form[$field_name]['#language'];

    // Handle a possible language change; new language values are inserted and
    // the previous values are deleted.
    if ($field['translatable'] && $previous_language != $form_state['values']['language']) {
      $form_state['values'][$field_name][$form_state['values']['language']] = $form_state['commerce_pos_gift_card']->{$field_name}[$previous_language];
      $form_state['values'][$field_name][$previous_language] = array();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Gift Card UI module instantiates the Gift Card delete form at a particular
 * path in the Commerce IA. It uses its own form ID to do so and alters the
 * form here to add in appropriate redirection.
 *
 * @see commerce_pos_gift_card_ui_gift_card_delete_form()
 */
function commerce_pos_gift_card_ui_form_commerce_pos_gift_card_ui_gift_card_delete_form_alter(&$form, &$form_state) {
  $form['actions']['cancel']['#href'] = 'admin/commerce/gift_cards';
  $form['#submit'][] = 'commerce_pos_gift_card_ui_gift_card_delete_form_submit';
}

/**
 * Submit callback for commerce_pos_gift_card_ui_gift_card_delete_form().
 *
 * @see commerce_pos_gift_card_ui_form_commerce_pos_gift_card_ui_gift_card_delete_form_alter()
 */
function commerce_pos_gift_card_ui_gift_card_delete_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/commerce/gift_cards';
}

/**
 * Implements hook_views_api().
 */
function commerce_pos_gift_card_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_pos_gift_card_ui') . '/includes/views',
  );
}

/**
 * Sets the breadcrumb for administrative gift card pages.
 *
 * @param $gift_card_types
 *   TRUE or FALSE indicating whether or not the breadcrumb should include the
 *     gift card types administrative page.
 */
function commerce_pos_gift_card_ui_set_breadcrumb($gift_card_types = FALSE) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Store'), 'admin/commerce'),
    l(t('Gift Cards'), 'admin/commerce/gift_cards'),
  );

  if ($gift_card_types) {
    $breadcrumb[] = l(t('Gift Card types'), 'admin/commerce/gift_cards/types');
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Generate an array for rendering the given order.
 *
 * @param $order
 *   A fully loaded order object.
 * @param $view_mode
 *   The view mode for displaying the order, 'administrator' or 'customer'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function commerce_pos_gift_card_ui_gift_card_view($gift_card, $view_mode = 'administrator', $breadcrumb = TRUE) {
  // Set the breadcrumb for the appropriate view mode if specified.
  if ($breadcrumb) {
    commerce_pos_gift_card_ui_set_breadcrumb();
  }

  drupal_add_css(drupal_get_path('module', 'commerce_pos_gift_card') . '/theme/commerce_pos_gift_card.theme.css');

  return entity_view('commerce_pos_gift_card', array($gift_card->gift_card_id => $gift_card), $view_mode, NULL, TRUE);
}
